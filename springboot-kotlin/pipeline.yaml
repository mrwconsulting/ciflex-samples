info:
  client: samples
  project: springboot-kotlin
metadata:
  COMPUTE_TYPE: small
  PROJECT_WORKSPACE: springboot-kotlin
  CUSTOM_VERSION_ENABLED: 'true'
  CUSTOM_PIPELINE_VERSION: latest
notification:
  enabled: true
  events:
    - PIPELINE_EXECUTION_FAILED
    - PIPELINE_EXECUTION_STARTED
  emailAddress:
    - support@mrwconsulting.tech
source:
  type: CodeStar
  codeStar:
    branch: main
    repository: mrwconsulting/CiFlex-Samples
    codeStarArn: <CODESTAR_ARN>
stages:
  - stageName: BuildStage
    pluginName: 8.5-Gradle
    pluginAliasName: OpenJDK
    isActive: true
    commands:
      - ./gradlew clean build test
    outputDirectory:
      - build
    partialBuildSpecFile: yaml/build-reports.yaml
    postStep:
      - pluginName: SAST-Codacy
        pluginAliasName: SAST-Codacy
        isActive: false
        metadata:
          'SAST-CODACY:PRIVILEGED': 'true'
        commands: []
        artifacts:
          BuildStage@OpenJDK:
            - type: output-directory
              value: build
        variables:
          CODACY_API_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/codacy:api_token'
          CODACY_PROJECT_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/codacy:project_token'
          CODACY_PROJECT_NAME:
            type: PLAINTEXT
            value: CiFlex-Samples
          CODACY_COVERAGE_REPORT:
            type: PLAINTEXT
            value: build/reports/jacoco/test/jacocoTestReport.xml
          CODACY_ORGANIZATION_PROVIDER:
            type: PLAINTEXT
            value: gh
      - pluginName: SAST-Snyk
        pluginAliasName: SAST-Snyk
        isActive: false
        commands: []
        artifacts:
          BuildStage@OpenJDK:
            - type: output-directory
              value: build
        variables:
          SNYK_ORG_ID:
            type: SECRETS_MANAGER
            value: 'samples/snyk:org_id'
          SNYK_API_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/snyk:api_token'
          SNYK_SEVERITY_THRESHOLD:
            type: PLAINTEXT
            value: high
  - stageName: ImageStage
    pluginName: '0.18-Trivy:Gradle'
    pluginAliasName: TRIVY-JiB
    isActive: true
    metadata:
      '0.18-TRIVY:GRADLE:PRIVILEGED': 'true'
    commands:
      - export IMAGE_NAME=springboot-kotlin
      - export IMAGE_TAR_ARCHIVE=build/jib-image.tar
      - ./gradlew incrementVersion --versionIncrementType=PATCH
      - >-
        export IMAGE_TAG=$(./gradlew printVersion -Psnapshot=false | sed -n '3
        p' | awk '{ print $2 }')
      - >-
        if [ -z "${IMAGE_TAG:-}" ];then export
        IMAGE_TAG=1.0.${CODEBUILD_BUILD_NUMBER};fi
      - ./gradlew jibBuildTar
      - >-
        export TRIVY_EXIT_CODE=$(trivy image --input ${IMAGE_TAR_ARCHIVE}
        --severity ${TRIVY_SEVERITY_LEVEL} --output build/jib-report.xml
        --format template --template "@contrib/junit.tpl")
    artifacts:
      BuildStage@OpenJDK:
        - type: output-directory
          value: build
    outputDirectory:
      - build
    partialBuildSpecFile: yaml/image-reports.yaml
    preStep:
      - pluginName: '0.18-Trivy:Gradle'
        pluginAliasName: TRIVY-BuildPack
        isActive: true
        metadata:
          '0.18-TRIVY:GRADLE:PRIVILEGED': 'true'
        commands:
          - export IMAGE_NAME=springboot-kotlin
          - export IMAGE_TAR_ARCHIVE=build/buildpack-image.tar
          - ./gradlew incrementVersion --versionIncrementType=PATCH
          - >-
            export IMAGE_TAG=$(./gradlew printVersion -Psnapshot=false | sed -n
            '3 p' | awk '{ print $2 }')
          - >-
            if [ -z "${IMAGE_TAG:-}" ];then export
            IMAGE_TAG=1.0.${CODEBUILD_BUILD_NUMBER};fi
          - './gradlew bootBuildImage --imageName=${IMAGE_NAME}:${IMAGE_TAG}'
          - 'docker image save --output ${IMAGE_TAR_ARCHIVE} ${IMAGE_NAME}'
          - >-
            export TRIVY_EXIT_CODE=$(trivy image --input ${IMAGE_TAR_ARCHIVE}
            --severity ${TRIVY_SEVERITY_LEVEL} --output build/jib-report.xml
            --format template --template "@contrib/junit.tpl")
        artifacts:
          BuildStage@OpenJDK:
            - type: output-directory
              value: build
        outputDirectory:
          - build
        partialBuildSpecFile: yaml/image-reports.yaml
    postStep:
      - pluginName: 4.27-DinD
        pluginAliasName: REGISTRY-DockerHub
        isActive: false
        metadata:
          '4.27-DIND:PRIVILEGED': 'true'
        commands:
          - >-
            echo ${DOCKERHUB_ACCESS_TOKEN} | docker login -u
            ${DOCKERHUB_USERNAME} --password-stdin ${DOCKERHUB_URL}
          - 'docker image load --input ${IMAGE_TAR_ARCHIVE}'
          - >-
            SOURCE_IMAGE=$(echo ${IMAGE_NAME}:${IMAGE_TAG} | tr '[:upper:]'
            '[:lower:]')
          - >-
            TARGET_IMAGE=$(echo
            ${DOCKERHUB_REPOSITORY}:${IMAGE_NAME}-${IMAGE_TAG} | tr '[:upper:]'
            '[:lower:]')
          - 'docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}'
          - 'docker push ${TARGET_IMAGE}'
        artifacts:
          ImageStage@TRIVY-BuildPack:
            - type: exported-variable
              value: IMAGE_TAG
            - type: exported-variable
              value: IMAGE_NAME
            - type: exported-variable
              value: IMAGE_TAR_ARCHIVE
            - type: output-directory
              value: build
        variables:
          DOCKERHUB_URL:
            type: PLAINTEXT
            value: 'https://index.docker.io/v1/'
          DOCKERHUB_REPOSITORY:
            type: PLAINTEXT
            value: mrwconsulting/CiFlex-Samples
          DOCKERHUB_USERNAME:
            type: SECRETS_MANAGER
            value: 'samples/dockerhub:username'
          DOCKERHUB_ACCESS_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/dockerhub:access_token'
      - pluginName: 4.27-DinD
        pluginAliasName: REGISTRY-GitHub
        isActive: false
        metadata:
          '4.27-DIND:PRIVILEGED': 'true'
        commands:
          - >-
            echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_USERNAME}
            --password-stdin ${GITHUB_URL}
          - 'docker image load --input ${IMAGE_TAR_ARCHIVE}'
          - >-
            SOURCE_IMAGE=$(echo ${IMAGE_NAME}:${IMAGE_TAG} | tr '[:upper:]'
            '[:lower:]')
          - >-
            TARGET_IMAGE=$(echo ${GITHUB_URL}/${GITHUB_REPOSITORY}/${IMAGE_NAME}
            | tr '[:upper:]' '[:lower:]')
          - 'docker tag ${SOURCE_IMAGE} ${TARGET_IMAGE}'
          - 'docker push ${TARGET_IMAGE}'
        artifacts:
          ImageStage@TRIVY-JiB:
            - type: exported-variable
              value: IMAGE_TAG
            - type: exported-variable
              value: IMAGE_NAME
            - type: exported-variable
              value: IMAGE_TAR_ARCHIVE
            - type: output-directory
              value: build
        variables:
          GITHUB_URL:
            type: PLAINTEXT
            value: ghcr.io
          GITHUB_REPOSITORY:
            type: PLAINTEXT
            value: mrwconsulting/CiFlex-Samples
          GITHUB_USERNAME:
            type: SECRETS_MANAGER
            value: 'samples/github:username'
          GITHUB_TOKEN:
            type: SECRETS_MANAGER
            value: 'samples/github:token'
  - stageName: DeployStage
    pluginName: Manual-Approval
    isActive: false
    postStep:
      - pluginName: EKS-Deployment
        pluginAliasName: EKS
        isActive: false
        commands:
          - ls -l
        variables:
          API_SERVER:
            type: SECRETS_MANAGER
            value: 'samples/plugins/eks:api_server'
          CERTIFICATE_AUTHORITY_DATA:
            type: SECRETS_MANAGER
            value: 'samples/plugins/eks:certificate_authority_data'
          CLIENT_KEY_DATA:
            type: SECRETS_MANAGER
            value: 'samples/plugins/eks:client_key_data'
          CLIENT_CERTIFICATE_DATA:
            type: SECRETS_MANAGER
            value: 'samples/plugins/eks:client_certificate_data'
          DEPLOYMENT_MANIFEST:
            type: PLAINTEXT
            value: ./deployment.yaml
